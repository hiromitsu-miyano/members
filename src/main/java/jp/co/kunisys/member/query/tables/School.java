/**
 * This class is generated by jOOQ
 */
package jp.co.kunisys.member.query.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jp.co.kunisys.member.query.Keys;
import jp.co.kunisys.member.query.Members;
import jp.co.kunisys.member.query.tables.records.SchoolRecord;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 学校
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class School extends TableImpl<SchoolRecord> {

	private static final long serialVersionUID = 1050587884;

	/**
	 * The reference instance of <code>members.school</code>
	 */
	public static final School SCHOOL = new School();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<SchoolRecord> getRecordType() {
		return SchoolRecord.class;
	}

	/**
	 * The column <code>members.school.school_id</code>. 学校コード
	 */
	public final TableField<SchoolRecord, Integer> SCHOOL_ID = createField("school_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "学校コード");

	/**
	 * The column <code>members.school.school_name</code>. 学校名
	 */
	public final TableField<SchoolRecord, String> SCHOOL_NAME = createField("school_name", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "学校名");

	/**
	 * The column <code>members.school.school_type</code>. 学校区分
	 */
	public final TableField<SchoolRecord, String> SCHOOL_TYPE = createField("school_type", org.jooq.impl.SQLDataType.VARCHAR.length(3), this, "学校区分");

	/**
	 * The column <code>members.school.pref_cd</code>. 所在県
	 */
	public final TableField<SchoolRecord, String> PREF_CD = createField("pref_cd", org.jooq.impl.SQLDataType.VARCHAR.length(3), this, "所在県");

	/**
	 * The column <code>members.school.comment</code>. コメント
	 */
	public final TableField<SchoolRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "コメント");

	/**
	 * The column <code>members.school.created</code>. 登録日時
	 */
	public final TableField<SchoolRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP, this, "登録日時");

	/**
	 * The column <code>members.school.created_user</code>. 登録ユーザ
	 */
	public final TableField<SchoolRecord, Integer> CREATED_USER = createField("created_user", org.jooq.impl.SQLDataType.INTEGER, this, "登録ユーザ");

	/**
	 * The column <code>members.school.updated</code>. 更新日時
	 */
	public final TableField<SchoolRecord, Timestamp> UPDATED = createField("updated", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新日時");

	/**
	 * The column <code>members.school.updated_user</code>. 更新ユーザ
	 */
	public final TableField<SchoolRecord, Integer> UPDATED_USER = createField("updated_user", org.jooq.impl.SQLDataType.INTEGER, this, "更新ユーザ");

	/**
	 * The column <code>members.school.deleted</code>. 削除日時
	 */
	public final TableField<SchoolRecord, Timestamp> DELETED = createField("deleted", org.jooq.impl.SQLDataType.TIMESTAMP, this, "削除日時");

	/**
	 * The column <code>members.school.deleted_user</code>. 削除ユーザ
	 */
	public final TableField<SchoolRecord, Integer> DELETED_USER = createField("deleted_user", org.jooq.impl.SQLDataType.INTEGER, this, "削除ユーザ");

	/**
	 * The column <code>members.school.version</code>. バージョン
	 */
	public final TableField<SchoolRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER, this, "バージョン");

	/**
	 * Create a <code>members.school</code> table reference
	 */
	public School() {
		this("school", null);
	}

	/**
	 * Create an aliased <code>members.school</code> table reference
	 */
	public School(String alias) {
		this(alias, SCHOOL);
	}

	private School(String alias, Table<SchoolRecord> aliased) {
		this(alias, aliased, null);
	}

	private School(String alias, Table<SchoolRecord> aliased, Field<?>[] parameters) {
		super(alias, Members.MEMBERS, aliased, parameters, "学校");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<SchoolRecord> getPrimaryKey() {
		return Keys.KEY_SCHOOL_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<SchoolRecord>> getKeys() {
		return Arrays.<UniqueKey<SchoolRecord>>asList(Keys.KEY_SCHOOL_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TableField<SchoolRecord, Integer> getRecordVersion() {
		return VERSION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public School as(String alias) {
		return new School(alias, this);
	}

	/**
	 * Rename this table
	 */
	public School rename(String name) {
		return new School(name, null);
	}
}
