/**
 * This class is generated by jOOQ
 */
package jp.co.kunisys.member.query.tables.records;


import javax.annotation.Generated;

import jp.co.kunisys.member.query.tables.Auth;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * 権限
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthRecord extends UpdatableRecordImpl<AuthRecord> implements Record4<String, String, Integer, Integer> {

	private static final long serialVersionUID = -816035733;

	/**
	 * Setter for <code>members.auth.auth_cd</code>. 権限コード
	 */
	public void setAuthCd(String value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>members.auth.auth_cd</code>. 権限コード
	 */
	public String getAuthCd() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>members.auth.name</code>. 権限名
	 */
	public void setName(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>members.auth.name</code>. 権限名
	 */
	public String getName() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>members.auth.sortkey</code>. 並び順
	 */
	public void setSortkey(Integer value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>members.auth.sortkey</code>. 並び順
	 */
	public Integer getSortkey() {
		return (Integer) getValue(2);
	}

	/**
	 * Setter for <code>members.auth.version</code>. バージョン
	 */
	public void setVersion(Integer value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>members.auth.version</code>. バージョン
	 */
	public Integer getVersion() {
		return (Integer) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<String> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<String, String, Integer, Integer> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<String, String, Integer, Integer> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field1() {
		return Auth.AUTH.AUTH_CD;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Auth.AUTH.NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field3() {
		return Auth.AUTH.SORTKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field4() {
		return Auth.AUTH.VERSION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value1() {
		return getAuthCd();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value3() {
		return getSortkey();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value4() {
		return getVersion();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AuthRecord value1(String value) {
		setAuthCd(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AuthRecord value2(String value) {
		setName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AuthRecord value3(Integer value) {
		setSortkey(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AuthRecord value4(Integer value) {
		setVersion(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AuthRecord values(String value1, String value2, Integer value3, Integer value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached AuthRecord
	 */
	public AuthRecord() {
		super(Auth.AUTH);
	}

	/**
	 * Create a detached, initialised AuthRecord
	 */
	public AuthRecord(String authCd, String name, Integer sortkey, Integer version) {
		super(Auth.AUTH);

		setValue(0, authCd);
		setValue(1, name);
		setValue(2, sortkey);
		setValue(3, version);
	}
}
