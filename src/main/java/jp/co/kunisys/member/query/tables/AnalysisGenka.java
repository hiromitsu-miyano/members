/**
 * This class is generated by jOOQ
 */
package jp.co.kunisys.member.query.tables;


import java.math.BigDecimal;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jp.co.kunisys.member.query.Keys;
import jp.co.kunisys.member.query.Members;
import jp.co.kunisys.member.query.tables.records.AnalysisGenkaRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * 分析原価
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AnalysisGenka extends TableImpl<AnalysisGenkaRecord> {

	private static final long serialVersionUID = 679393799;

	/**
	 * The reference instance of <code>members.analysis_genka</code>
	 */
	public static final AnalysisGenka ANALYSIS_GENKA = new AnalysisGenka();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AnalysisGenkaRecord> getRecordType() {
		return AnalysisGenkaRecord.class;
	}

	/**
	 * The column <code>members.analysis_genka.id</code>. ID
	 */
	public final TableField<AnalysisGenkaRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "ID");

	/**
	 * The column <code>members.analysis_genka.denpyo_no</code>. 伝票番号
	 */
	public final TableField<AnalysisGenkaRecord, Long> DENPYO_NO = createField("denpyo_no", org.jooq.impl.SQLDataType.BIGINT, this, "伝票番号");

	/**
	 * The column <code>members.analysis_genka.denpyo_date</code>. 伝票日付
	 */
	public final TableField<AnalysisGenkaRecord, Date> DENPYO_DATE = createField("denpyo_date", org.jooq.impl.SQLDataType.DATE, this, "伝票日付");

	/**
	 * The column <code>members.analysis_genka.busho_code</code>. 部署コード
	 */
	public final TableField<AnalysisGenkaRecord, String> BUSHO_CODE = createField("busho_code", org.jooq.impl.SQLDataType.VARCHAR.length(5), this, "部署コード");

	/**
	 * The column <code>members.analysis_genka.project_code</code>. プロジェクトコード
	 */
	public final TableField<AnalysisGenkaRecord, String> PROJECT_CODE = createField("project_code", org.jooq.impl.SQLDataType.VARCHAR.length(10), this, "プロジェクトコード");

	/**
	 * The column <code>members.analysis_genka.kamoku_code</code>. 科目コード
	 */
	public final TableField<AnalysisGenkaRecord, String> KAMOKU_CODE = createField("kamoku_code", org.jooq.impl.SQLDataType.VARCHAR.length(5), this, "科目コード");

	/**
	 * The column <code>members.analysis_genka.remark</code>. 摘要
	 */
	public final TableField<AnalysisGenkaRecord, String> REMARK = createField("remark", org.jooq.impl.SQLDataType.VARCHAR.length(60), this, "摘要");

	/**
	 * The column <code>members.analysis_genka.uriage</code>. 売上
	 */
	public final TableField<AnalysisGenkaRecord, BigDecimal> URIAGE = createField("uriage", org.jooq.impl.SQLDataType.DECIMAL.precision(15, 3), this, "売上");

	/**
	 * The column <code>members.analysis_genka.shiire</code>. 仕入
	 */
	public final TableField<AnalysisGenkaRecord, BigDecimal> SHIIRE = createField("shiire", org.jooq.impl.SQLDataType.DECIMAL.precision(15, 3), this, "仕入");

	/**
	 * The column <code>members.analysis_genka.roumu</code>. 労務費
	 */
	public final TableField<AnalysisGenkaRecord, BigDecimal> ROUMU = createField("roumu", org.jooq.impl.SQLDataType.DECIMAL.precision(15, 3), this, "労務費");

	/**
	 * The column <code>members.analysis_genka.gaichu</code>. 外注費
	 */
	public final TableField<AnalysisGenkaRecord, BigDecimal> GAICHU = createField("gaichu", org.jooq.impl.SQLDataType.DECIMAL.precision(15, 3), this, "外注費");

	/**
	 * The column <code>members.analysis_genka.keihi</code>. 経費
	 */
	public final TableField<AnalysisGenkaRecord, BigDecimal> KEIHI = createField("keihi", org.jooq.impl.SQLDataType.DECIMAL.precision(15, 3), this, "経費");

	/**
	 * Create a <code>members.analysis_genka</code> table reference
	 */
	public AnalysisGenka() {
		this("analysis_genka", null);
	}

	/**
	 * Create an aliased <code>members.analysis_genka</code> table reference
	 */
	public AnalysisGenka(String alias) {
		this(alias, ANALYSIS_GENKA);
	}

	private AnalysisGenka(String alias, Table<AnalysisGenkaRecord> aliased) {
		this(alias, aliased, null);
	}

	private AnalysisGenka(String alias, Table<AnalysisGenkaRecord> aliased, Field<?>[] parameters) {
		super(alias, Members.MEMBERS, aliased, parameters, "分析原価");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<AnalysisGenkaRecord, Long> getIdentity() {
		return Keys.IDENTITY_ANALYSIS_GENKA;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<AnalysisGenkaRecord> getPrimaryKey() {
		return Keys.KEY_ANALYSIS_GENKA_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<AnalysisGenkaRecord>> getKeys() {
		return Arrays.<UniqueKey<AnalysisGenkaRecord>>asList(Keys.KEY_ANALYSIS_GENKA_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AnalysisGenka as(String alias) {
		return new AnalysisGenka(alias, this);
	}

	/**
	 * Rename this table
	 */
	public AnalysisGenka rename(String name) {
		return new AnalysisGenka(name, null);
	}
}
